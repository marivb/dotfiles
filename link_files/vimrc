" vim-plug dependencies
call plug#begin('~/.vimplugs')

Plug 'junegunn/vim-easy-align'
Plug 'slim-template/vim-slim'
Plug 'editorconfig/editorconfig-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Valloric/YouCompleteMe'
Plug 'elzr/vim-json'
Plug 'vim-airline/vim-airline'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown'
Plug 'mattn/emmet-vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'heavenshell/vim-jsdoc'
Plug 'altercation/vim-colors-solarized'
Plug 'itchyny/vim-haskell-indent'
Plug 'vim-scripts/haskell.vim'
Plug 'sickill/vim-monokai'
Plug 'tomasr/molokai'
Plug 'vim-scripts/EasyMotion'
Plug 'scrooloose/nerdtree'
Plug 'vim-scripts/icalendar.vim'

call plug#end()

let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1
let g:vim_markdown_folding_disabled = 1

let g:solarized_termtrans = 1
colorscheme solarized
set cursorline

let g:instant_markdown_autostart = 0
let g:instant_markdown_open_to_the_world = 1

" File and buffer configs
set noswapfile
set number " show line numbers
" hide buffers instead of closing them when you :q, keeping their undo history
set hidden

" Open new panes on bottom and right
set splitbelow
set splitright

" Convert tabs to spaces, use 2 spaces in place of tabs.
set expandtab
set tabstop=2
set shiftwidth=2

" Enable syntax and file type detection
syntax enable
filetype plugin indent on

" Enable syntax folding for blocks and comments.
set foldmethod=syntax
" Don't fold blocks less than 3 lines long.
set foldminlines=3
set foldlevel=100

" indentation configuration
set cindent
set smartindent
set autoindent

" use 4 spaces for lua indentation
autocmd FileType lua setlocal shiftwidth=4 softtabstop=4 expandtab

" text search options
set hlsearch
set incsearch
set ignorecase
set smartcase

" text search remappings
nnoremap / :set hlsearch<CR>/
nnoremap <CR> :noh<CR><CR>

" enable mouse in console
set mousemodel=extend
set mouse=a
set mousehide

" File type associations
au BufRead,BufNewFile Dockerfile* set filetype=dockerfile
au BufRead,BufNewFile .gitconfig* set filetype=gitconfig
au BufRead,BufNewFile *.ics set filetype=icalendar
au BufRead,BufNewFile *bashrc* set filetype=sh

" Remove trailing whitespaces before write, except for binary files
func! StripTrailingWhitespace()
  normal mZ
  %s/\s\+$//e
  normal `Z
endfunc
autocmd BufWrite * if ! &bin | call StripTrailingWhitespace() | endif

" File name tab completion functions like bash, it gives you a list of
" options instead of automatically filling in the first possible match.
set wildmenu
" It will however, with this option, complete up to the first character of
" ambiguity.
set wildmode=list:longest

" No hiding double quotes in JSON
let g:vim_json_syntax_conceal = 0
" Fold JSONs by syntax
au BufRead,BufNewFile *.json set foldmethod=syntax

" Airline prefs
let g:airline#extensions#tabline#enabled = 1
set laststatus=2

" Easy Motion prefs

let g:EasyMotion_leader_key = '<Leader><Leader>'

" CtrlP

let g:ctrlp_max_height = 20
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_switch_buffer = 2
let g:ctrlp_working_path_mode = 2
let g:ctrlp_mruf_include = '\.py$\|\.rb$|\.coffee|\.haml'
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript']
" For some specific repository types, I want to open only files under version
" control
let g:ctrlp_user_command = {
      \ 'types': {
      \ 1: ['.gitignore', 'cd %s && git ls-files -co -X .gitignore'],
      \ 2: ['.git/', 'cd %s && git ls-files -co'],
      \ 3: ['.hg/', 'hg --cwd %s locate -I .'],
      \ },
      \ 'fallback': 'find %s -type f'
      \ }

" for CtrlP
map <leader>pp :CtrlP<CR>
map <leader>pb :CtrlPBuffer<CR>
map <leader>pt :CtrlPTag<CR>
map <leader>pq :CtrlPQuickFix<CR>
map <leader>pd :CtrlPDir<CR>
map <leader>pr :CtrlPRTS<CR>
map <leader>pm :CtrlPMRU<CR>

" for EasyMotion
let g:EasyMotion_leader_key = '<Leader>'

" Tab navigation like web browers
nmap <C-S-Left> :tabprevious<CR>
map  <C-S-Left> :tabprevious<CR>
imap <C-S-Left> <ESC>:tabprevious<CR>i
nmap <C-S-Right>   :tabnext<CR>
map  <C-S-Right>   :tabnext<CR>
imap <C-S-Right>   <ESC>:tabnext<CR>i
nmap <C-t>          :tabnew<CR>
imap <C-t>     <ESC>:tabnew<CR>
nmap <C-c>          :tabclose<CR>
imap <C-c> <ESC>:tabclose<CR>

" NerdTree
map <C-n> :NERDTreeToggle<CR>

" Options for vim-jsdoc
let g:jsdoc_allow_input_prompt=1
let g:jsdoc_enable_es6=1
